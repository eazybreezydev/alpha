import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import '../providers/weather_provider.dart';
import '../providers/home_provider.dart';
import '../widgets/smart_tips_card.dart'; // Import SmartTipsCard
import '../widgets/local_ads_banner.dart'; // Import LocalAdsBanner
import '../widgets/easy_flow_score_card.dart'; // Import EasyFlowScoreCard
import '../widgets/wind_forecast_chart.dart'; // Import WindForecastChart
import '../widgets/wind_level_card.dart'; // Import WindLevelCard
import '../widgets/wind_flow_animation.dart'; // Import new wind flow system
import '../models/easy_flow_score_model.dart'; // Import EasyFlowScoreModel

class HomeDashboard extends StatelessWidget {
  const HomeDashboard({Key? key}) : super(key: key);

  /// Determines if it's currently day time (6 AM to 6 PM)
  bool _isDayTime() {
    final now = DateTime.now();
    final hour = now.hour;
    return hour >= 6 && hour < 18; // Day from 6 AM to 6 PM
  }

  /// Gets the appropriate background image path based on time
  String _getBackgroundImage() {
    return _isDayTime() 
        ? 'assets/images/backgrounds/dayv2.png'
        : 'assets/images/backgrounds/night.png';
  }

  /// Gets the appropriate text color based on time to contrast with background
  Color _getTextColor() {
    return _isDayTime() ? Colors.black87 : Colors.white;
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<WeatherProvider, HomeProvider>(
      builder: (context, weatherProvider, homeProvider, _) {
        final weatherData = weatherProvider.currentWeather;
        final isCelsius = homeProvider.isCelsius;
        final tempUnit = isCelsius ? '°C' : '°F';
        final windSpeed = weatherData?.windSpeed ?? 0;
        final windDirection = weatherData?.windDirection ?? '--';
        final temperature = weatherData?.temperature ?? 0;
        // TODO: Replace with real AQI and pollen data
        final aqiLevel = 'Good';
        final pollenLevel = 'Low';
        final aqiColor = Colors.green;
        final pollenColor = Colors.green;

        return Scaffold(
          backgroundColor: Colors.transparent,
          body: Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage(_getBackgroundImage()),
                fit: BoxFit.cover,
              ),
            ),
            child: SafeArea(
              child: SingleChildScrollView(
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    minHeight: MediaQuery.of(context).size.height - MediaQuery.of(context).padding.top - MediaQuery.of(context).padding.bottom,
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      // Top bar
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Row(
                              children: [
                                Icon(Icons.location_on, color: _getTextColor()),
                                const SizedBox(width: 8),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Consumer<WeatherProvider>(
                                      builder: (context, weatherProvider, _) {
                                        final city = weatherProvider.city ?? 'Unknown';
                                        final province = weatherProvider.province ?? '';
                                        final locationText = province.isNotEmpty ? '$city, $province' : city;
                                        return Text(
                                          locationText,
                                          style: TextStyle(
                                            color: _getTextColor(),
                                            fontSize: 20,
                                            fontWeight: FontWeight.bold,
                                            shadows: _isDayTime() ? [] : [
                                              const Shadow(
                                                offset: Offset(1.0, 1.0),
                                                blurRadius: 3.0,
                                                color: Colors.black54,
                                              ),
                                            ],
                                          ),
                                        );
                                      },
                                    ),
                                    const SizedBox(height: 2),
                                    _LiveTimestamp(textColor: _getTextColor()),
                                  ],
                                ),
                              ],
                            ),
                            IconButton(
                              icon: Icon(Icons.my_location, color: _getTextColor()),
                              onPressed: () => weatherProvider.refreshWeatherData(context),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 8), // Reduced spacing from 24 to 8
                      // Main content (no Center widget)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                            // Recommendation card (now the only alert)
                            RecommendationCard(
                              temperature: weatherProvider.currentWeather?.temperature ?? 0,
                              windSpeed: weatherProvider.currentWeather?.windSpeed ?? 0,
                              aqiLevel: 'Good', // Replace with real AQI if available
                              isCelsius: homeProvider.isCelsius,
                            ),
                            const SizedBox(height: 24), // Reduced margin between card and house image from 40 to 24
                            // 3D-style house icon with wind flowing behind it
                            SizedBox(
                              width: 320,
                              height: 240,
                              child: Stack(
                                children: [
                                  // Wind flow overlay specifically behind the house
                                  Positioned.fill(
                                    child: WindFlowOverlay(
                                      windDirection: windDirection,
                                      windSpeed: windSpeed.toDouble(),
                                      isDayTime: _isDayTime(),
                                      isSubtle: windSpeed < 15, // Subtle mode for light winds
                                    ),
                                  ),
                                  // House image with transparency allowing wind to show through
                                  Center(
                                    child: Image.asset(
                                      _shouldShowOpenWindows(
                                        aqiLevel, 
                                        temperature, 
                                        windSpeed, 
                                        homeProvider.isCelsius
                                      )
                                        ? 'assets/images/windows_openedv2.png'
                                        : 'assets/images/windows_closed.png',
                                      width: 320, // Increased from 240
                                      height: 240, // Increased from 180
                                      fit: BoxFit.contain,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            const SizedBox(height: 24),
                            // EasyFlow Score Card
                            EasyFlowScoreCard(
                              isCelsius: homeProvider.isCelsius,
                              scoreModel: EasyFlowScoreModel(
                                windSpeed: weatherProvider.currentWeather?.windSpeed ?? 0,
                                windDirection: weatherProvider.currentWeather?.windDirection ?? 'N',
                                temperature: weatherProvider.currentWeather?.temperature ?? 0,
                                humidity: weatherProvider.currentWeather?.humidity ?? 45.0,
                                airQualityLevel: aqiLevel,
                                homeOrientation: homeProvider.homeConfig.orientation.name,
                                isCelsius: homeProvider.isCelsius,
                              ),
                            ),
                            const SizedBox(height: 24),
                            // Wind Level Card
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: WindLevelCard(
                                windSpeed: weatherProvider.currentWeather?.windSpeed ?? 0,
                              ),
                            ),
                            const SizedBox(height: 24),
                            // Wind Forecast Chart
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: WindForecastChart(
                                windData: weatherProvider.windForecast,
                                peakStartTime: weatherProvider.getPeakWindStartTime(),
                                peakEndTime: weatherProvider.getPeakWindEndTime(),
                              ),
                            ),
                            const SizedBox(height: 24),
                            // Add LocalAdsBanner above tips
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: LocalAdsBanner(),
                            ),
                            const SizedBox(height: 24),
                            Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: SmartTipsCard(),
                            ),
                            const SizedBox(height: 24),
                          ],
                        ),
                        const SizedBox(height: 32),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}

// Weather stats row below house
class WeatherStatsRow extends StatelessWidget {
  final double temperature;
  final String tempUnit;
  final double windSpeed;
  final String windDirection;
  final String aqiLevel;
  final Color aqiColor;
  final String pollenLevel;
  final Color pollenColor;
  const WeatherStatsRow({
    Key? key,
    required this.temperature,
    required this.tempUnit,
    required this.windSpeed,
    required this.windDirection,
    required this.aqiLevel,
    required this.aqiColor,
    required this.pollenLevel,
    required this.pollenColor,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final primary = Theme.of(context).colorScheme.primary;
    final secondary = Theme.of(context).colorScheme.secondary;
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          StatCard(
            label: 'Temp',
            value: '${temperature.toStringAsFixed(1)}$tempUnit',
            icon: Icons.thermostat,
            color: primary,
            bgColor: secondary.withOpacity(0.18),
            width: 90, // Increased from 60
            height: 100, // Increased from 70
            iconSize: 32, // Increased from 22
            valueFontSize: 18, // Increased from 13
            labelFontSize: 13, // Increased from 10
          ),
          const SizedBox(width: 16),
          StatCard(
            label: 'Wind',
            value: '${windSpeed.toStringAsFixed(1)} km/h $windDirection',
            icon: Icons.air,
            color: primary,
            bgColor: secondary.withOpacity(0.18),
            width: 90,
            height: 100,
            iconSize: 32,
            valueFontSize: 18,
            labelFontSize: 13,
          ),
          const SizedBox(width: 16),
          StatCard(
            label: 'AQI',
            value: aqiLevel,
            icon: Icons.cloud,
            color: primary,
            bgColor: secondary.withOpacity(0.18),
            width: 90,
            height: 100,
            iconSize: 32,
            valueFontSize: 18,
            labelFontSize: 13,
          ),
          const SizedBox(width: 16),
          StatCard(
            label: 'Pollen',
            value: pollenLevel,
            icon: Icons.grass,
            color: primary,
            bgColor: secondary.withOpacity(0.18),
            width: 90,
            height: 100,
            iconSize: 32,
            valueFontSize: 18,
            labelFontSize: 13,
          ),
        ],
      ),
    );
  }
}

// Quick stat card
class StatCard extends StatelessWidget {
  final String label;
  final String value;
  final IconData icon;
  final Color color;
  final Color bgColor;
  final double width;
  final double height;
  final double iconSize;
  final double valueFontSize;
  final double labelFontSize;
  const StatCard({
    Key? key,
    required this.label,
    required this.value,
    required this.icon,
    required this.color,
    required this.bgColor,
    this.width = 60,
    this.height = 70,
    this.iconSize = 22,
    this.valueFontSize = 13,
    this.labelFontSize = 10,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Card(
      color: bgColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        width: width,
        height: height,
        padding: const EdgeInsets.all(8),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: color, size: iconSize),
            const SizedBox(height: 6),
            Flexible(
              child: Text(
                value,
                style: TextStyle(color: color, fontWeight: FontWeight.bold, fontSize: valueFontSize),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
                textAlign: TextAlign.center,
              ),
            ),
            const SizedBox(height: 2),
            Text(
              label,
              style: TextStyle(color: color.withOpacity(0.7), fontSize: labelFontSize),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}

// Compass direction indicator
class CompassIndicator extends StatelessWidget {
  final String direction;
  const CompassIndicator({Key? key, required this.direction}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(Icons.explore, color: Colors.white, size: 28),
        const SizedBox(width: 8),
        Text(direction, style: const TextStyle(color: Colors.white, fontSize: 18)),
      ],
    );
  }
}

// Simple logic for window alert message
String _getWindowAlertMessage({
  required double temperature,
  required double windSpeed,
  required String aqiLevel,
  required bool isCelsius,
}) {
  // Use correct thresholds for Celsius and Fahrenheit
  final minTemp = isCelsius ? 16 : 61; // 16°C ≈ 61°F
  final maxTemp = isCelsius ? 26 : 79; // 26°C ≈ 79°F
  if (aqiLevel == 'Good' && temperature > minTemp && temperature < maxTemp && windSpeed < 20) {
    return 'Now is a great time to open your windows!';
  } else if (aqiLevel != 'Good') {
    return 'Air quality is not ideal for open windows.';
  } else if (temperature <= minTemp) {
    return 'It may be too cold to open your windows.';
  } else if (temperature >= maxTemp) {
    return 'It may be too warm to open your windows.';
  } else if (windSpeed >= 20) {
    return 'It is too windy to open your windows.';
  }
  return '';
}

// Detailed recommendation card for window/AC advice
class RecommendationCard extends StatelessWidget {
  final double temperature;
  final double windSpeed;
  final String aqiLevel;
  final bool isCelsius;
  const RecommendationCard({
    Key? key,
    required this.temperature,
    required this.windSpeed,
    required this.aqiLevel,
    required this.isCelsius,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    String title = '';
    String subtitle = '';
    IconData icon = Icons.info_outline;
    Color color = Colors.blueGrey;

    // Use correct thresholds for unit
    final coldThreshold = isCelsius ? 16.0 : 61.0;
    final hotThreshold = isCelsius ? 26.0 : 79.0;
    
    // Convert wind speed to km/h for consistent comparison
    double windSpeedKmh;
    if (isCelsius) {
      // Metric units: wind speed is in m/s, convert to km/h
      windSpeedKmh = windSpeed * 3.6;
    } else {
      // Imperial units: wind speed is in mph, convert to km/h
      windSpeedKmh = windSpeed * 1.60934;
    }

    if (aqiLevel != 'Good') {
      title = 'Keep Windows Closed';
      subtitle = 'Air quality is not ideal for open windows.';
      icon = Icons.warning_amber_rounded;
      color = Colors.orangeAccent;
      print('  Decision: Keep closed - Bad AQI');
    } else if (temperature >= hotThreshold) {
      title = 'Keep Windows Closed';
      subtitle = 'It\'s too hot outside for open windows.';
      icon = Icons.error_outline_rounded; // Alert badge icon
      color = Colors.redAccent; // Use red for alert if too hot
      print('  Decision: Keep closed - Too hot');
    } else if (temperature <= coldThreshold) {
      title = 'Keep Windows Closed';
      subtitle = 'It may be too cold to open your windows.';
      icon = Icons.ac_unit_rounded;
      color = Colors.lightBlueAccent;
      print('  Decision: Keep closed - Too cold');
    } else if (windSpeedKmh >= 25) { // Use consistent 25 km/h threshold
      title = 'Keep Windows Closed';
      subtitle = 'It is too windy to open your windows.';
      icon = Icons.air_rounded;
      color = Colors.cyanAccent;
      print('  Decision: Keep closed - Too windy');
    } else {
      title = 'Open Windows Recommended';
      subtitle = 'Now is a great time to open your windows!';
      icon = Icons.air_rounded; // Breeze icon
      color = Colors.blueAccent; // Use blue for perfect conditions
      print('  Decision: Open windows - Good conditions');
    }

    return Stack(
      children: [
        Container(
          width: double.infinity,
          margin: const EdgeInsets.fromLTRB(24, 8, 24, 0), // Reduced top margin from 16 to 8
          padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 18),
          decoration: BoxDecoration(
            color: color.withOpacity(0.13),
            borderRadius: BorderRadius.circular(18),
            border: Border.all(color: color, width: 1.5),
          ),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: TextStyle(
                        color: color,
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      subtitle,
                      style: TextStyle(
                        color: color.withOpacity(0.85),
                        fontSize: 15,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        if (temperature >= hotThreshold)
          Positioned(
            bottom: 8,
            right: 32,
            child: Container(
              margin: const EdgeInsets.only(top: 48), // Further increased top margin for more space
              padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 10),
              decoration: BoxDecoration(
                color: Colors.blueAccent, // Changed to blue
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.blueAccent.withOpacity(0.18),
                    blurRadius: 6,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.ac_unit_rounded, color: Colors.white, size: 18), // Snowflake icon
                  const SizedBox(width: 6),
                  Text(
                    'AC Recommended',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 13,
                      letterSpacing: 0.2,
                    ),
                  ),
                ],
              ),
            ),
          ),
      ],
    );
  }
}

class _LiveTimestamp extends StatefulWidget {
  final Color textColor;
  const _LiveTimestamp({Key? key, this.textColor = Colors.black54}) : super(key: key);
  @override
  State<_LiveTimestamp> createState() => _LiveTimestampState();
}

class _LiveTimestampState extends State<_LiveTimestamp> {
  late String _timestamp;
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    _timestamp = _getFormattedTimestamp();
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _timestamp = _getFormattedTimestamp();
      });
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Text(
      _timestamp,
      style: TextStyle(
        color: widget.textColor,
        fontSize: 14,
        fontWeight: FontWeight.w400,
        shadows: widget.textColor == Colors.white ? [
          const Shadow(
            offset: Offset(1.0, 1.0),
            blurRadius: 3.0,
            color: Colors.black54,
          ),
        ] : [],
      ),
    );
  }
}

String _getFormattedTimestamp() {
  final now = DateTime.now();
  final month = _monthShort(now.month);
  final day = now.day;
  final hour = now.hour;
  final minute = now.minute.toString().padLeft(2, '0');
  final ampm = hour < 12 ? 'am' : 'pm';
  final hour12 = hour == 0 ? 12 : (hour > 12 ? hour - 12 : hour);
  return '$month $day $hour12:$minute $ampm';
}

String _monthShort(int month) {
  const months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ];
  return months[month - 1];
}

// Helper function to determine if house should show open windows
bool _shouldShowOpenWindows(String aqiLevel, double temperature, double windSpeed, bool isCelsius) {
  // Use same thresholds as RecommendationCard
  final coldThreshold = isCelsius ? 16.0 : 61.0;
  final hotThreshold = isCelsius ? 26.0 : 79.0;
  
  // Convert wind speed to km/h for consistent comparison
  double windSpeedKmh;
  if (isCelsius) {
    // Metric units: wind speed is in m/s, convert to km/h
    windSpeedKmh = windSpeed * 3.6;
  } else {
    // Imperial units: wind speed is in mph, convert to km/h
    windSpeedKmh = windSpeed * 1.60934;
  }
  
  return aqiLevel == 'Good' && 
         temperature > coldThreshold && 
         temperature < hotThreshold && 
         windSpeedKmh < 25;
}
